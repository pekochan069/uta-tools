---
import "overlayscrollbars/overlayscrollbars.css";
import SpeedInsights from "@vercel/speed-insights/astro";
import { Toaster } from "solid-sonner";
import ScrollToTop from "~/components/ScrollToTop.astro";
import Navbar from "../components/navbar/Navbar.astro";
import "~/styles/root.css";
import { languageTag } from "../paraglide/runtime";

type Props = {
  title?: string;
};

const { title = "Uta Tools" } = Astro.props;
// @ts-ignore
const dir = Astro.locals.paraglide.dir;
---

<html lang={languageTag()} } dir={dir}>
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.png" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <div class="relative bg-background" id="app">
      <Navbar /><div class="container px-4 md:px-6"><slot /></div>
      <Toaster
        toastOptions={{
          classes: {
            toast:
              "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
            description: "group-[.toast]:text-muted-foreground",
            actionButton: "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
            cancelButton: "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
          },
        }}
        class="toaster group"
        position="bottom-right"
        client:load
      />
      <ScrollToTop />
      <SpeedInsights />
    </div>
  </body>
  <script>
    import { OverlayScrollbars } from "overlayscrollbars";

    OverlayScrollbars(document.body, {
      scrollbars: {
        autoHide: "scroll",
      },
    });
  </script>
  <script is:inline>
    function setTheme(document) {
      const getThemePreference = () => {
        if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
          return localStorage.getItem("theme");
        }
        return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
      };
      const isDark = getThemePreference() === "dark";

      document.documentElement.classList[isDark ? "add" : "remove"]("dark");

      if (typeof localStorage !== "undefined") {
        const observer = new MutationObserver(() => {
          const isDark = document.documentElement.classList.contains("dark");
          localStorage.setItem("theme", isDark ? "dark" : "light");
        });
        observer.observe(document.documentElement, {
          attributes: true,
          attributeFilter: ["class"],
        });
      }
    }

    setTheme(document);

    document.documentElement.addEventListener("astro:before-swap", (event) => {
      setTheme(event.newDocument);
    });
  </script>
</html>
